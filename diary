#!/usr/bin/env bash

set -e
set -o pipefail

current_year=$(date '+%Y')
current_month=$(date '+%m')
current_day=$(date '+%d')

data_dir=${XDG_DATA_HOME:-$HOME/.local/share}/diary
gpg_id_file=$data_dir/gpg_id

process_data_directory() {
    if [ ! -d "$data_dir" ]; then
        echo "Data directory '$data_dir' does not exist. Have you executed 'init'?"
        exit 1
    fi

    if [ ! -f "$gpg_id_file" ]; then
        echo "File '$gpg_id_file' does not exist. Have you executed 'init'?"
        exit 1
    fi

    gpg_id=`cat $gpg_id_file`
    if [[ ! "$gpg_id" =~ ^[A-Z0-9]{40}$ ]]; then
        echo "Invalid gpg-id, expecting [A-Z0-9]{40} and got '$gpg_id'. Have you executed 'init'?"
        exit 1
    fi

    while IFS= read -r -d $'\0' file
    do
        file_basename=$(basename ${file})
        if [[ "$file_basename" == "gpg_id" ]]; then
            continue;
        fi

        if [[ ! "$file_basename" =~ ^[0-9]{2}.gpg$ ]]; then
            echo "Found an old file which isn't encrypted so I will encrypt it now: '$file'"
            output_file="$file.gpg"
            gpg --armor --output "$output_file" --encrypt --recipient "$gpg_id" < $file && rm "$file" 
        else
            gpg_key="$(gpg --list-keys --with-colons "$gpg_id" | sed -n 's/^sub:[^idr:]*:[^:]*:[^:]*:\([^:]*\):[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[a-zA-Z]*e[a-zA-Z]*:.*/\1/p')"
            current_key="$(gpg -v --decrypt --list-only --keyid-format long "$file" 2>&1 | sed -nE 's/^gpg: public key is ([A-F0-9]+)$/\1/p')"
            if [[ "$gpg_key" != "$current_key" ]]; then
                echo "Found a file which is encrypted with a wrong key so I will reencrypt it now: '$file'"
                tmp_file="$file.tmp"
                gpg --quiet --decrypt "$file" | gpg --armor --output "$tmp_file" --encrypt --recipient "$gpg_id" && mv "$tmp_file" "$file" || rm -f "$tmp_file"
            fi
        fi
    done < <(find -L "$data_dir" -type f -print0)
}

cmd_usage() {
    echo "A script for writing a diary."
    echo ""
    echo "Entries are stored in '\$XDG_DATA_HOME/diary'."
    echo ""
    echo "Syntax:"
    echo "diary init <gpg-id>"
    echo "diary"
    echo "diary read [year [month [day]]]"
    echo "diary write [year month day]"
}

cmd_init() {
    mkdir -p "$data_dir"
    echo "$1" > "$gpg_id_file"
    process_data_directory;
}

cmd_write() {
    process_data_directory;

    # Read and sanitize year, month and day for which the action should be performed
    action_year=$1
    action_month=$2
    action_day=$3

    if [ ${#action_month} -eq 1 ]
    then
        action_month="0$action_month"
    fi

    if [ ${#action_day} -eq 1 ]
    then
        action_day="0$action_day"
    fi

    # Write needs all parameters to be specified or uses a default value with no
    # parameters given
    if [ "$action_year" == "" ] && [ "$action_month" == "" ] && [ "$action_day" == "" ]
    then
        action_year=$current_year
        action_month=$current_month
        action_day=$current_day
    else
        if [ "$action_year" == "" ] || [ "$action_month" == "" ] || [ "$action_day" == "" ]
        then
            echo "Missing parameters, syntax: diary write [year month day]"
            exit 1
        fi
    fi

    diary_dir="$data_dir/$action_year/$action_month";
    diary_file="$action_day.gpg"

    tmp_dir=$(mktemp -d "${TMPDIR:-/tmp/}$(basename $0).XXXXXXXXXXXX")
    trap 'rm -rf -- "$tmp_dir"' EXIT

    tmp_file="tmp.txt"

    if [ -f "$diary_dir/$diary_file" ] 
    then
        gpg --quiet --decrypt "$diary_dir/$diary_file" > "$tmp_dir/$tmp_file"
    fi

    "${EDITOR:-vi}" "$tmp_dir/$tmp_file"

    mkdir -p "$diary_dir"
    cat "$tmp_dir/$tmp_file" | gpg --armor --output "$tmp_dir/$tmp_file.gpg" --encrypt --recipient "$gpg_id" && mv "$tmp_dir/$tmp_file.gpg" "$diary_dir/$diary_file" 
}

cmd_read() {
    process_data_directory;

    action_year=$1
    action_month=$2
    action_day=$3

    if [ ${#action_month} -eq 1 ]
    then
        action_month="0$action_month"
    fi

    if [ ${#action_day} -eq 1 ]
    then
        action_day="0$action_day"
    fi

    diary_dir="$data_dir"

    if [ "$action_year" != "" ]
    then
        diary_dir="$diary_dir/$action_year"
    fi

    if [ "$action_month" != "" ]
    then
        diary_dir="$diary_dir/$action_month"
    fi

    output=""
    while IFS= read -r -d $'\0' file
    do
        file_basename=$(basename ${file})
        if [[ "$file_basename" == "gpg_id" ]]; then
            continue;
        fi

        if [ "$action_day" != "" ]
        then
            if [[ "$file_basename" != "$action_day.gpg" ]]; then
                continue;
            fi
        fi

        IFS='/' read -r -a parts <<< "$file"
        date=$(echo "${parts[@]: -3}" | tr ' ' '/')
        date=${date%.gpg}
        contents=$(gpg --quiet --decrypt "$file")

        output+=$">$date"
        output+=$'\n'
        output+="$contents"
        output+=$'\n'
        output+=$'\n'
    done < <(find -L "$diary_dir" -type f -print0 | sort -zr)

    echo "$output" | less
}

case "$1" in
	help|--help)
        shift;
        cmd_usage "$@";
    ;;
	init)
        shift;
        cmd_init "$@";
    ;;
	write)
        shift;
        cmd_write "$@";
    ;;
	read)
        shift;
        cmd_read "$@";
    ;;
	*)
        cmd_write "$@";
    ;;
esac
exit 0
